import { join } from 'path';
import { TelegramAPI } from '../api/telegram.api';
import { AppConversation, IAppContext } from '../context/context.interface';
import { writeFile } from 'fs/promises';
import { Collection, ObjectId } from 'mongodb';
import { Product } from 'src/common/integrations/mongodb/mongodb.interfaces';
import sharp from 'sharp';

export const createProductScene = (products: Collection<Product>) => {
  let fullPhotos = [];
  let compressPhotos = [];

  return async function (conversation: AppConversation, ctx: IAppContext) {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ (–ö—Ä–æ—Å—Å–æ–≤–∫–∏)');
    const typeTitle = await conversation.waitFor('message:text');

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (Nike)');
    const brandTitle = await conversation.waitFor('message:text');

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω—É—é —Å–µ—Ç–∫—É (EU)');
    const sizeGridTitle = await conversation.waitFor('message:text');

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
    const titleTitle = await conversation.waitFor('message:text');

    await ctx.reply('–≠—Ç–æ "–≠–∫—Å–ø—Ä–µ—Å—Å" —Ç–æ–≤–∞—Ä? (–î–∞ / –ù–µ—Ç)');
    const inStockTitle = await conversation.waitFor('message:text');

    await ctx.reply('–≠—Ç–æ "–ù–æ–≤–∏–Ω–∫–∞" —Ç–æ–≤–∞—Ä? (–î–∞ / –ù–µ—Ç)');
    const isNewTitle = await conversation.waitFor('message:text');

    await ctx.reply('–≠—Ç–æ "–ü–æ–ø—É–ª—è—Ä–Ω–æ" —Ç–æ–≤–∞—Ä? (–î–∞ / –ù–µ—Ç)');
    const isSaleTitle = await conversation.waitFor('message:text');

    await ctx.reply('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (–î–∞ / –ù–µ—Ç)');
    const isHiddenTitle = await conversation.waitFor('message:text');
    let weight = 0;
    let length = 0;
    let width = 0;
    let height = 0;
    let fullPreviewName = '';
    let compressPreviewName = '';
    let compressfile_id = '';

    do {
      await ctx.reply(
        '–ö–∞–∫–æ–π –≤–µ—Å —É —Ç–æ–≤–∞—Ä–∞ (–ø–∏—Å–∞—Ç—å —Ü–∏—Ñ—Ä—É –≤ –≥—Ä–∞–º–º–∞—Ö)\n\n 1000–≥ = 1–∫–≥',
      );
      ctx = await conversation.wait();

      if (!isNaN(parseInt(ctx.message.text))) {
        weight = parseInt(ctx.message.text);
      }
    } while (isNaN(parseInt(ctx.message.text)));

    do {
      await ctx.reply('–ö–∞–∫–∞—è —à–∏—Ä–∏–Ω–∞ (–ø–∏—Å–∞—Ç—å —Ü–∏—Ñ—Ä—É –≤ —Å–º)');
      ctx = await conversation.wait();

      if (!isNaN(parseInt(ctx.message.text))) {
        width = parseInt(ctx.message.text);
      }
    } while (isNaN(parseInt(ctx.message.text)));

    do {
      await ctx.reply('–ö–∞–∫–∞—è –¥–ª–∏–Ω–∞ (–ø–∏—Å–∞—Ç—å —Ü–∏—Ñ—Ä—É –≤ —Å–º)');
      ctx = await conversation.wait();

      if (!isNaN(parseInt(ctx.message.text))) {
        length = parseInt(ctx.message.text);
      }
    } while (isNaN(parseInt(ctx.message.text)));

    do {
      await ctx.reply('–ö–∞–∫–∞—è –≤—ã—Å–æ—Ç–∞ (–ø–∏—Å–∞—Ç—å —Ü–∏—Ñ—Ä—É –≤ —Å–º)');
      ctx = await conversation.wait();

      if (!isNaN(parseInt(ctx.message.text))) {
        height = parseInt(ctx.message.text);
      }
    } while (isNaN(parseInt(ctx.message.text)));

    do {
      await ctx.reply(
        '–û—Ç–ø—Ä–∞–≤—Ç–µ —Å—é–¥–∞ –ø—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–∞ (–í –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –±–µ–∑ —Å–∂–∞—Ç–∏—è)',
      );
      ctx = await conversation.wait();

      if (ctx.message?.document) {
        const full = ctx.message?.document;
        const api = new TelegramAPI();
        const fullURI = await api.getFileURI(full.file_id);
        const buffer = await (await fetch(fullURI)).arrayBuffer();
        await writeFile(
          join(
            __dirname,
            '..',
            '..',
            '..',
            '..',
            'static',
            fullURI.split('/').at(-1),
          ),
          Buffer.from(buffer),
        );

        fullPreviewName = fullURI.split('/').at(-1);
        compressfile_id = full.file_id;

        try {
          const metadata = await sharp(buffer).metadata();
          await sharp(buffer)
            .resize({
              width: +((metadata?.width || 0) / 2).toFixed(0) || 300,
              height: +((metadata?.height || 0) / 2).toFixed(0) || 300,
            })
            .toFile(
              join(
                __dirname,
                '..',
                '..',
                '..',
                '..',
                'static',
                '2__' + fullURI.split('/').at(-1),
              ),
            );

          compressPreviewName = '2__' + fullURI.split('/').at(-1);
        } catch (err) {
          console.log(err);
          await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏');
          return;
        }
      }
    } while (!ctx.message?.document);

    do {
      if (ctx.message?.text === '/next') {
        break;
      }

      if (fullPhotos.length > 0) {
        await ctx.reply('–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
      } else {
        await ctx.reply(
          '–û—Ç–ø—Ä–∞–≤—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–í –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –±–µ–∑ —Å–∂–∞—Ç–∏—è)\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /next',
        );
      }

      ctx = await conversation.wait();

      if (ctx.message?.document) {
        const doc = ctx.message?.document;
        const api = new TelegramAPI();
        const fullURI = await api.getFileURI(doc.file_id);
        const buffer = await (await fetch(fullURI)).arrayBuffer();
        await writeFile(
          join(
            __dirname,
            '..',
            '..',
            '..',
            '..',
            'static',
            fullURI.split('/').at(-1),
          ),
          Buffer.from(buffer),
        );

        fullPhotos.push(fullURI.split('/').at(-1));

        try {
          const metadata = await sharp(buffer).metadata();
          sharp(buffer)
            .resize({
              width: +((metadata?.width || 0) / 2).toFixed(0) || 300,
              height: +((metadata?.height || 0) / 2).toFixed(0) || 300,
            })
            .toFile(
              join(
                __dirname,
                '..',
                '..',
                '..',
                '..',
                'static',
                '2__' + fullURI.split('/').at(-1),
              ),
            );

          compressPhotos.push('2__' + fullURI.split('/').at(-1));
        } catch (err) {
          await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏');
          return;
        }
      }
    } while (ctx.message?.text !== '/next');

    const { insertedId } = await products.insertOne({
      _id: new ObjectId(),
      created_at: new Date(),
      type: typeTitle.msg.text,
      brand: brandTitle.msg.text,
      title: titleTitle.msg.text,
      size_grid: sizeGridTitle.msg.text,
      preview: fullPreviewName,
      preview_compress: compressPreviewName,
      photos: Array.from(new Set(fullPhotos)),
      photos_compress: Array.from(new Set(compressPhotos)),
      discount: 0,
      status: {
        is_hidden:
          isHiddenTitle.msg.text.toLocaleLowerCase() === '–¥–∞' ? false : true,
        in_stock: inStockTitle.msg.text.toLocaleLowerCase() === '–¥–∞',
        is_new: isNewTitle.msg.text.toLocaleLowerCase() === '–¥–∞',
        is_sale: isSaleTitle.msg.text.toLocaleLowerCase() === '–¥–∞',
      },
      similar: [],
      sizes: [],
      package: {
        height,
        length,
        weight,
        width,
      },
    });

    return await ctx.replyWithDocument(compressfile_id, {
      caption: `
‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!

${
  isHiddenTitle.msg.text.toLocaleLowerCase() === '–¥–∞'
    ? 'üì¢ –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤–∏–¥–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!'
    : '‚ùóÔ∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–∫—Ä—ã—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!'
}

id: ${insertedId}
–¢–∏–ø: ${typeTitle.msg.text}
–ë—Ä–µ–Ω–¥: ${brandTitle.msg.text}
–†–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞: ${sizeGridTitle.msg.text}
–ù–∞–∑–≤–∞–Ω–∏–µ: ${titleTitle.msg.text}

–°—Ç–∞—Ç—É—Å—ã:
–≠–∫—Å–ø—Ä–µ—Å—Å   - ${inStockTitle.msg.text.toLocaleLowerCase() === '–¥–∞' ? '‚úÖ' : '‚ùå'}
–ù–æ–≤–∏–Ω–∫–∞    - ${isNewTitle.msg.text.toLocaleLowerCase() === '–¥–∞' ? '‚úÖ' : '‚ùå'}
–ü–æ–ø—É–ª—è—Ä–Ω—ã–π - ${isSaleTitle.msg.text.toLocaleLowerCase() === '–¥–∞' ? '‚úÖ' : '‚ùå'}
–†–∞–∑–º–µ—Ä—ã —É–ø–∞–∫–æ–≤–∫–∏:
–®–∏—Ä–∏–Ω–∞ - ${width}
–í—ã—Å–æ—Ç–∞ - ${height}
–î–ª–∏–Ω–∞ - ${length}

–í–µ—Å —É–ø–∞–∫–æ–≤–∫–∏: ${weight}–≥–º

–í—Å–µ–≥–æ —Ñ–æ—Ç–æ: ${compressPhotos.length}
${(compressPhotos = [])}
${(fullPhotos = [])}
  `,
    });
  };
};
